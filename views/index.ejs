<!DOCTYPE html>
<html>
    <head>
        <script src="js/jquery-1.8.3.min.js" type="text/javascript"></script>
        <script src="js/index.js" type="text/javascript"></script>
        <link href="css/index.css" type="text/css" rel="stylesheet"/>
        <title>lecturus</title>
    </head>
    <body>
        <h1> <%=title %> </h1>
        <p> להסתכל בגוגל דרייב בקובץ שמקס הכין שם הכל כתוב מסודר </p>
        <!-- <section>
            red color: not ready
        </section>
        <ul>
            <li> 
            	<h3> POST /users/registerUser </h3>
            	<p>
 					<h4> precondition </h4>
					This function must receive json with email: user id, any other fields: active true/false.  
                </p>
                <p>
					<h4> postcondition </h4>
					This function will return json with status: 1 = success / 0 = failure.
                </p>
                <p>
 					<h4> description </h4>
 					This function goes through 'email' properties in 'user' documents and searches for a suitable email.
					If an email, received in request, was not found, this function will insert new 'user' document into 'users' collection in mongodb.
                </p>
                <p>
 					<h4> example </h4>
					email		vandervidi@gmail.com
				</p>
            </li>
            <li> 
                <h3> POST /users/getUser </h3>
                <p>
 					<h4> precondition </h4>
					This function must receive json with email: user id, any other fields: active true/false.
                </p>
                <p>
	  				<h4> postcondition </h4>
					This function will return json with status: 1 = success / 0 = failure, and 'user' data.
                 </p>
                <p>
	 				<h4> description </h4>
	 				This function goes through 'email' properties in 'user' documents and searches for a suitable email.
					If an email, received in request, was found, this function will return 'user' document's info.
                 </p>
                <p>
	 				<h4> example </h4>
					email		vandervidi@gmail.com
				</p>
            </li>
            <li> 
                <h3> POST /users/getActiveUsers </h3>
                <p> 
 					<h4> precondition </h4>
 					This function must receive json with org. 
                </p>
                <p>
 					<h4> postcondition </h4>
 					This function will return json with status: 1 = success / 0 = failure, users: array[all active users that belong to the organization].
                </p>
                <p>	
					<h4> description </h4> 
  					This function goes through 'org' properties in 'user' documents and searches for a suitable organization, it will return all active users from ( with active property set to 1 ).
                </p>
                <p>   	
 					<h4> example </h4>
  					org		shenkar
                </p>
            </li>
            <li>
				<h3> POST /users/updateUser </h3 
  					<h4> precondition </h4>
					This function must receive json with email: user id, any other fields: active true/false.  
                </p>
                <p>
  					<h4> postcondition </h4>
					This function will return json with status: 1 = success / 0 = failure.
                </p>
                <p>
  					<h4> description </h4>
 					This function goes through 'email' properties in 'user' documents and searches for a suitable email.
					If an email, received in request, was found, this function will update 'user' document with new information.
                </p>
                <p>
  					<h4> example </h4>
					email		vandervidi@gmail.com
				</p>
            </li>
            <hr>
            <li> 
                <h3> POST /session/createSession </h3>
                <p>
					<h4> precondition </h4>
 					This function will receive json with user email, any other fields: name , description, lecturer, degree, course, more data as wanted.
                </p>
                <p>
					<h4> postcondition </h4>
  					This function will return json with sessionId: the id of new created session, timestamp: session creation time at the server, status: 1 = success / 0 = failure.
                </p>
                <p> 
					<h4> description </h4>
					This function will create new 'session' document in the 'sessions' collection, it will assign email assession owner. 
 					This function will set all the data, received in the request, in the new created session. 
                </p>
                <p>
					<h4> example </h4>
					email		vandervidi@gmail.com
				</p>
            </li>
            <li> 
            	<h3> POST /session/addMembers </h3>
                <p> 
                	<h4> precondition </h4>
                  	This function must receive json with sessionId, participants: array[emails].
                </p>
                <p>
					<h4> postcondition </h4>
				 	This function will return json with status: 1 = success / 0 = failure. 
				</p>
				<p>
				 	<h4> description </h4>
				 	This function will find the 'session' document in the 'sessions' collection by sessionId that will be received in the request.
				 	This function will insert all user's emails received in the request into the 'session' document as session 'participants'.
				</p>
				<p>
				  	<h4> example </h4>
				   	sessionId 			1427559374447127001
				   	participants[1] 	somemail1@gmail.com
				   	participants[2] 	somemail2@gmail.com 
				   	participants[3]		somemail3@gmail.com
				</p>
            </li>
            <li> 
            	<h3> POST /session/getUserSessions </h3>
            	<p>
             		<h4> precondition </h4>
			 		This function must receive json with email: userId.
 				</p>
				<p>
			   		<h4> postcondition </h4>
			 		This function will return json with status: 1 = success / 0 = failure. 
 				</p>
				<p>
			  		<h4> description </h4>
			 		This function will find all the 'session' documents in the 'sessions' collection by user id (email). 
			  		This function searches for user id both in 'session' document's 'owner' and 'participants' properties.
 				</p>
				<p>
			  		<h4> example </h4>
			   		email		vandervidi@gmail.com
 				</p>
            </li>
            <li class="notReady"> 
                <h3> /session/getSessionInProgress -- precondition </h3>
                <p> 
                   json data with email
                </p>
                <p>
                    json data with status 1/0, all current active sesions that the user was participant 
                </p>
            </li>
            <li> 
                <h3> POST /session/updateSessionStatus </h3>
                <p> 
                 	<h4> precondition </h4>
   					This function will receive json with sessionId, email: session owner's email, status: 1 = start / 0 = stop.
                </p>
                <p>
					<h4> postcondition </h4>
					This function will return json with status: 1 = success / 0 = failure.
                </p>
                <p>					   
  					<h4> description </h4>
   					This function will find the suitable session according to 'sessionId' passed in the request, check if email passed in the request.
  					belongs to the session 'owner', if yes it will alter session property 'recordStarts' to needed one in the 'sessions' collection.
                </p>
                <p>
			  		<h4> example </h4>
				   	sessionId	1427559374447127001
				   	email		somemail1@gmail.com
				   	status		1		
                </p>
            </li>
            <li> 
                <h3> /session/updateSession -- precondition </h3>
                <p> 
                   json data with session data called data data:{all session data}
                </p>
                <p>
                    json data with status 1/0
                </p>
            </li>
            <li class="notReady"> 
                <h3> /session/updateSessionRating -- precondition </h3>
                <p> 
                   json data with sessionId, email, rating true/false (positive/negative)
                </p>
                <p>
                    json data with status 1/0
                </p>
            </li>
            <li class="notReady"> 
                <h3> /session/updateViews -- precondition </h3>
                <p> 
                   json data with sessionId
                </p>
                <p>
                    json data with status 1/0
                </p>
            </li>
            <li> 
                <h3> /session/uploadTag -- precondition </h3>
                <p> 
                   json data with sessionId, tags[json data {timestamp ,text, email}]
                </p>
                <p>
                    json data with status 1/0
                </p>
            </li>
            <li> 
                <h3> /session/uploadImage -- precondition </h3>
                <p> 
                   json data with file, sessionId, timestamp, email
                </p>
                <p>
                    json data with status 1/0
                </p>
            </li>
            <li> 
                <h3> /session/uploadAudio -- precondition </h3>
                <p> 
                   json data with file, sessionId, timestamp, email
                </p>
                <p>
                    json data with status 1/0
                </p>
            </li>
            <li> 
                <h3> GET /session/getVideoById/?videoId & edit </h3>
                <p> 
					<h4> precondition </h4>
 					This function will receive json with user videoId, edit: true = add 1 to view counter / false = dont add 1 to view counter.
                </p>
                <p>
 					<h4> postcondition </h4>
  					This function will return json with info, status: 1 = success / 0 = failure.
                </p>
                <p> 
					<h4> description </h4>
					This function will find 'session' document in the 'sessions' collection, accordint to the sessionId received in the request. 
 					This function will increase session view counter only if edit property, received in the request, is true. 
                </p>
                <p>
					<h4> example </h4>
					email		vandervidi@gmail.com                
				</p>             	  
            </li>
			<li> 
            	<h3> POST /session/getMembers </h3>
                <p> 
					<h4> precondition </h4>
 					This function must receive json with sessionId, email: that belongs to one of the participants.
                </p>
                <p>
 					<h4> postcondition </h4>
  					This function will return json with status: 1 = success / 0 = failure, participants: [those users agreed to participate in the current session].
                </p>
                <p> 
					<h4> description </h4>
 					This function will find the 'session' document in the 'sessions' collection by sessionId that will be received in the request.
 					This function will extract all the emails from 'participants' property in the 'session' document.
                </p>
                <p>
					<h4> example </h4>
 					sessionId 			1427559374447127001
					email			 	somemail1@gmail.com              
				</p>             	  
			</li>          
            
            <hr>
            <li> 
                <h3> /auxiliary/getVideosByCourse/? email & degree & course -- precondition </h3>
                <p> 
                    data with email, degree (id), course (id) 
                </p>
                <p>
                    json data with status 1/0, all related videos
                </p>
            </li>
            <li> 
                <h3> /auxiliary/getCourses -- precondition </h3>
                <p> 
                    data with email
                </p>
                <p>
                    json data with status 1/0, all user courses hierarchy
                </p>
            </li>
        </ul> -->
        <script>
            console.log('shenkar lecturus api')
        </script>
    </body>
</html>